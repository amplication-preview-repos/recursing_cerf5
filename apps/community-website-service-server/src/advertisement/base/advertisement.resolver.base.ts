/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Advertisement } from "./Advertisement";
import { AdvertisementCountArgs } from "./AdvertisementCountArgs";
import { AdvertisementFindManyArgs } from "./AdvertisementFindManyArgs";
import { AdvertisementFindUniqueArgs } from "./AdvertisementFindUniqueArgs";
import { CreateAdvertisementArgs } from "./CreateAdvertisementArgs";
import { UpdateAdvertisementArgs } from "./UpdateAdvertisementArgs";
import { DeleteAdvertisementArgs } from "./DeleteAdvertisementArgs";
import { User } from "../../user/base/User";
import { AdvertisementService } from "../advertisement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Advertisement)
export class AdvertisementResolverBase {
  constructor(
    protected readonly service: AdvertisementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Advertisement",
    action: "read",
    possession: "any",
  })
  async _advertisementsMeta(
    @graphql.Args() args: AdvertisementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Advertisement])
  @nestAccessControl.UseRoles({
    resource: "Advertisement",
    action: "read",
    possession: "any",
  })
  async advertisements(
    @graphql.Args() args: AdvertisementFindManyArgs
  ): Promise<Advertisement[]> {
    return this.service.advertisements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Advertisement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Advertisement",
    action: "read",
    possession: "own",
  })
  async advertisement(
    @graphql.Args() args: AdvertisementFindUniqueArgs
  ): Promise<Advertisement | null> {
    const result = await this.service.advertisement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Advertisement)
  @nestAccessControl.UseRoles({
    resource: "Advertisement",
    action: "create",
    possession: "any",
  })
  async createAdvertisement(
    @graphql.Args() args: CreateAdvertisementArgs
  ): Promise<Advertisement> {
    return await this.service.createAdvertisement({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Advertisement)
  @nestAccessControl.UseRoles({
    resource: "Advertisement",
    action: "update",
    possession: "any",
  })
  async updateAdvertisement(
    @graphql.Args() args: UpdateAdvertisementArgs
  ): Promise<Advertisement | null> {
    try {
      return await this.service.updateAdvertisement({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Advertisement)
  @nestAccessControl.UseRoles({
    resource: "Advertisement",
    action: "delete",
    possession: "any",
  })
  async deleteAdvertisement(
    @graphql.Args() args: DeleteAdvertisementArgs
  ): Promise<Advertisement | null> {
    try {
      return await this.service.deleteAdvertisement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Advertisement): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
