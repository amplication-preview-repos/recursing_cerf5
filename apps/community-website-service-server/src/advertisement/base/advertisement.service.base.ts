/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Advertisement as PrismaAdvertisement,
  User as PrismaUser,
} from "@prisma/client";

export class AdvertisementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdvertisementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.advertisement.count(args);
  }

  async advertisements<T extends Prisma.AdvertisementFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvertisementFindManyArgs>
  ): Promise<PrismaAdvertisement[]> {
    return this.prisma.advertisement.findMany<Prisma.AdvertisementFindManyArgs>(
      args
    );
  }
  async advertisement<T extends Prisma.AdvertisementFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvertisementFindUniqueArgs>
  ): Promise<PrismaAdvertisement | null> {
    return this.prisma.advertisement.findUnique(args);
  }
  async createAdvertisement<T extends Prisma.AdvertisementCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvertisementCreateArgs>
  ): Promise<PrismaAdvertisement> {
    return this.prisma.advertisement.create<T>(args);
  }
  async updateAdvertisement<T extends Prisma.AdvertisementUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvertisementUpdateArgs>
  ): Promise<PrismaAdvertisement> {
    return this.prisma.advertisement.update<T>(args);
  }
  async deleteAdvertisement<T extends Prisma.AdvertisementDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvertisementDeleteArgs>
  ): Promise<PrismaAdvertisement> {
    return this.prisma.advertisement.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.advertisement
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
