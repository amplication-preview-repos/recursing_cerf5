/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FamilyMember as PrismaFamilyMember,
  User as PrismaUser,
} from "@prisma/client";

export class FamilyMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FamilyMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.familyMember.count(args);
  }

  async familyMembers<T extends Prisma.FamilyMemberFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FamilyMemberFindManyArgs>
  ): Promise<PrismaFamilyMember[]> {
    return this.prisma.familyMember.findMany<Prisma.FamilyMemberFindManyArgs>(
      args
    );
  }
  async familyMember<T extends Prisma.FamilyMemberFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FamilyMemberFindUniqueArgs>
  ): Promise<PrismaFamilyMember | null> {
    return this.prisma.familyMember.findUnique(args);
  }
  async createFamilyMember<T extends Prisma.FamilyMemberCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FamilyMemberCreateArgs>
  ): Promise<PrismaFamilyMember> {
    return this.prisma.familyMember.create<T>(args);
  }
  async updateFamilyMember<T extends Prisma.FamilyMemberUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FamilyMemberUpdateArgs>
  ): Promise<PrismaFamilyMember> {
    return this.prisma.familyMember.update<T>(args);
  }
  async deleteFamilyMember<T extends Prisma.FamilyMemberDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FamilyMemberDeleteArgs>
  ): Promise<PrismaFamilyMember> {
    return this.prisma.familyMember.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.familyMember
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
