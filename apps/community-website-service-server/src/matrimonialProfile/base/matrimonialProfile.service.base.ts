/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MatrimonialProfile as PrismaMatrimonialProfile,
  User as PrismaUser,
} from "@prisma/client";

export class MatrimonialProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MatrimonialProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.matrimonialProfile.count(args);
  }

  async matrimonialProfiles<T extends Prisma.MatrimonialProfileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MatrimonialProfileFindManyArgs>
  ): Promise<PrismaMatrimonialProfile[]> {
    return this.prisma.matrimonialProfile.findMany<Prisma.MatrimonialProfileFindManyArgs>(
      args
    );
  }
  async matrimonialProfile<T extends Prisma.MatrimonialProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MatrimonialProfileFindUniqueArgs>
  ): Promise<PrismaMatrimonialProfile | null> {
    return this.prisma.matrimonialProfile.findUnique(args);
  }
  async createMatrimonialProfile<T extends Prisma.MatrimonialProfileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MatrimonialProfileCreateArgs>
  ): Promise<PrismaMatrimonialProfile> {
    return this.prisma.matrimonialProfile.create<T>(args);
  }
  async updateMatrimonialProfile<T extends Prisma.MatrimonialProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MatrimonialProfileUpdateArgs>
  ): Promise<PrismaMatrimonialProfile> {
    return this.prisma.matrimonialProfile.update<T>(args);
  }
  async deleteMatrimonialProfile<T extends Prisma.MatrimonialProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MatrimonialProfileDeleteArgs>
  ): Promise<PrismaMatrimonialProfile> {
    return this.prisma.matrimonialProfile.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.matrimonialProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
